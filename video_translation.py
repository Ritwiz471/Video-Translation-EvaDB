# -*- coding: utf-8 -*-
"""Video Translation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Iox_04vpmwL9kVJSQ51GVrJYZSiW3h5

# Video Translation

## Connect to EvaDB
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --quiet "evadb[document,notebook]"
import evadb
cursor = evadb.connect().cursor()

"""## Download Video"""

!wget -nc "https://www.dropbox.com/scl/fi/9ht5zra5tvua2x79fxy0j/Group-Discussion-20210609_043048-Meeting-Recording.mp4?rlkey=s7tzz5xlfez4gnpqny3ncfx51&dl=0" -O video.mp4

"""## Visualize Video Frame"""

import cv2
from matplotlib import pyplot as plt

def show_video_frame(input_video_path, show_frame_number = 100):
    vcap = cv2.VideoCapture(input_video_path)
    vcap.set(1, show_frame_number)
    ret, frame = vcap.read()
    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
    plt.imshow(frame)
    plt.show()
    vcap.release()

show_video_frame('video.mp4')

! pip install eva-decord

# Load the video
cursor.query("DROP TABLE IF EXISTS VIDEOS").df()
cursor.query("LOAD VIDEO 'video.mp4' INTO VIDEOS").df()

"""## Speech Recognition From Video"""

# Drop the Text Summarization UDF if needed
cursor.query("DROP FUNCTION IF EXISTS SpeechRecognizer;").df()

# Create a Text Summarization UDF using Hugging Face
text_summarizer_udf_creation = """
    CREATE FUNCTION SpeechRecognizer
    TYPE HuggingFace
    TASK 'automatic-speech-recognition'
    MODEL 'openai/whisper-base';
"""
cursor.query(text_summarizer_udf_creation).df()

"""## Text Translation"""

# Drop the Text Translation UDF if needed
cursor.query("DROP FUNCTION IF EXISTS TextTranslator;").df()

# Create a Text Translation UDF using Hugging Face
text_translation_udf_creation = """
    CREATE FUNCTION TextTranslator
    TYPE HuggingFace
    TASK 'text2text-generation'
    MODEL 'Helsinki-NLP/opus-mt-en-zh';
"""
cursor.query(text_translation_udf_creation).df()

"""## Configure Pandas Display"""

import pandas as pd
pd.set_option('display.max_colwidth', None)

# Drop the table if needed
cursor.query("DROP TABLE IF EXISTS TEXT_SUMMARY;").df()


# Create a materialized view of the text summarization output
text_summarization_query = """
    CREATE TABLE
    TEXT_SUMMARY AS
    SELECT SpeechRecognizer(audio) FROM VIDEOS;
"""
cursor.query(text_summarization_query).df()

cursor.query("SELECT * FROM TEXT_SUMMARY;").df()

"""## Translated Transcription of Video (Chinese)"""

# Drop the table if needed
cursor.query("DROP TABLE IF EXISTS TEXT_TRANSLATED;").df()


# Create a materialized view of the text summarization output
text_translation_query = """
    CREATE TABLE
    TEXT_TRANSLATED AS
    SELECT TextTranslator(text) FROM TEXT_SUMMARY;
"""
cursor.query(text_translation_query).df()

cursor.query("SELECT * FROM TEXT_TRANSLATED;").df()